{
	// Place your cosmosbot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Command Template": {
		"prefix": "discord-command",
		"body": [
			"import { SlashCommandBuilder } from 'discord.js';",
			"import { Command } from './index';",
			"",
			"const ${1:commandFile}: Command = {",
			"    data: new SlashCommandBuilder()",
			"        .setName('${2:command_name}')",
			"        .setDescription('${3:Command description}'),",
			"    async execute(interaction) {",
			"        $4",
			"    },",
			"};",
			"",
			"export default ${1:commandFile};"
		],
		"description": "Template for creating Discord slash commands"
	},
	"Event Template": {
		"prefix": "discord-event",
		"body": [
			"import { Event } from './index';",
			"",
			"const ${1:event_file}: Event = {",
			"    name: '${2:event_name}',",
			"    once: ${3|true,false|},",
			"    execute(${4:params}) {",
			"        $5",
			"    },",
			"};",
			"",
			"export default ${1:event_title};"
		],
		"description": "Template for creating Discord events"
	}
}